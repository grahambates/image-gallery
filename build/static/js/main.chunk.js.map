{"version":3,"sources":["logo.svg","SVG.jsx","ImageGallery.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","iconMapper","left","points","right","maximize","d","minimize","play","pause","Fragment","x","y","width","height","SVG","props","strokeWidth","viewBox","icon","className","xmlns","fill","stroke","strokeLinecap","strokeLinejoin","defaultProps","screenChangeEvents","isEnterOrSpaceKey","event","key","parseInt","keyCode","which","ImageGallery","state","currentIndex","startIndex","thumbsTranslate","currentSlideOffset","galleryWidth","thumbnailsWrapperWidth","thumbnailsWrapperHeight","isFullscreen","isPlaying","loadedImages","imageGallery","React","createRef","thumbnailsWrapper","thumbnails","imageGallerySlideWrapper","handleKeyDown","bind","handleMouseDown","handleOnSwiped","handleScreenChange","handleSwiping","onThumbnailMouseLeave","handleImageError","pauseOrPlay","renderThumbInner","renderItem","slideLeft","slideRight","toggleFullScreen","togglePlay","unthrottledSlideToIndex","slideToIndex","throttle","slideDuration","trailing","lazyLoad","lazyLoaded","this","autoPlay","window","addEventListener","initResizeObserver","addScreenChangeEvent","prevProps","prevState","items","thumbnailPosition","showThumbnails","itemsSizeChanged","length","itemsChanged","isEqual","startIndexUpdated","thumbnailsPositionChanged","showThumbnailsChanged","removeResizeObserver","handleResize","slideThumbnailBar","setState","removeEventListener","removeScreenChangeEvent","playPauseIntervalId","clearInterval","transitionTimer","clearTimeout","isTransitioning","onSlide","setTimeout","index","onThumbnailClick","thumbnailMouseOverTimer","dir","scrollingUpDown","scrollingLeftRight","LEFT","RIGHT","onScreenChange","modalFullscreen","indexDifference","totalScroll","disableThumbnailScroll","thumbElement","current","isThumbnailVertical","scrollHeight","scrollWidth","infinite","alignment","previousIndex","indexChanged","firstSlideWasPrevSlide","secondSlideWasPrevSlide","firstSlideIsNextSlide","secondSlideIsNextSlide","swipingEnded","translateX","direction","gallerySlideWrapperHeight","slideStyle","useTranslate3D","isRTL","baseTranslateX","totalSlides","getTranslateXForTwoSlide","translate","Object","assign","WebkitTransform","MozTransform","msTransform","OTransform","transform","verticalTranslateValue","slideOnThumbnailOver","onClick","onTouchMove","onTouchEnd","onTouchStart","onMouseOver","onMouseLeave","showBullets","slides","bullets","forEach","item","getAlignmentClassName","originalClass","thumbnailClass","handleRenderItem","handleRenderThumbInner","showItem","getSlideStyle","slide","original","tabIndex","style","onKeyUp","handleSlideKeyUp","onFocus","role","shouldPushSlideOnInfiniteMode","push","igThumbnailClass","clsx","active","type","aria-pressed","aria-label","handleThumbnailMouseOver","handleThumbnailKeyUp","igBulletClass","bulletClass","bulletOnClick","itemIndex","call","Math","abs","slideIsTransitioning","ignoreIsTransitioning","isFirstOrLastSlide","setThumbsTranslate","scroll","getThumbsTranslate","canSlideNext","canSlidePrevious","absX","preventDefaultTouchmoveEvent","disableSwipe","stopPropagation","swipingTransitionDuration","setScrollDirection","cancelable","preventDefault","side","swipingTransition","transition","swipeThreshold","velocity","flickThreshold","swipeDirection","isFlick","handleOnSwipedTo","slideTo","sufficientSwipe","canSlideLeft","canSlideRight","classList","add","disableKeyDown","useBrowserFullscreen","remove","exitFullScreen","onErrorImageURL","target","src","indexOf","resizeObserver","unobserve","onWindowResize","offsetWidth","offsetHeight","element","ResizeObserver","debounce","entries","observe","fullScreen","fullScreenElement","document","fullscreenElement","msFullscreenElement","mozFullScreenElement","webkitFullscreenElement","onBeforeSlide","slideCount","nextIndex","onSliding","slideNext","slidePrevious","onThumbnailMouseOver","eventName","gallery","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","setModalFullscreen","exitFullscreen","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","shouldCallOnPlay","onPlay","slideInterval","setInterval","max","shouldCallOnPause","onPause","onImageLoad","onImageError","itemSrc","fullscreen","imageSet","onLoad","handleImageLoaded","onError","map","source","srcSet","media","alt","originalAlt","sizes","title","originalTitle","description","handleThumbnailError","onThumbnailError","thumbnail","thumbnailAlt","thumbnailTitle","thumbnailLabel","additionalClass","indexSeparator","renderFullscreenButton","renderCustomControls","renderLeftNav","renderRightNav","showFullscreenButton","showIndex","showNav","showPlayButton","renderPlayPauseButton","thumbnailStyle","getThumbnailStyle","getSlideItems","slideWrapperClass","slideWrapper","ref","canSlide","delta","onSwiping","onSwiped","igClass","igContentClass","thumbnailWrapperClass","aria-live","getThumbnailBarHeight","Component","disabled","PREFIX_URL","App","showGalleryFullscreenButton","showGalleryPlayButton","showVideo","images","embedUrl","_renderVideo","concat","_getStaticImages","_imageGallery","console","debug","getCurrentIndex","_resetVideo","value","checked","i","url","Boolean","_toggleShowVideo","frameBorder","allowFullScreen","_onImageClick","_onImageLoad","_onSlide","_onPause","_onScreenChange","_onPlay","onChange","_handleInputChange","_handleThumbnailPositionChange","id","_handleCheckboxChange","htmlFor","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { number, oneOf, string } from 'prop-types';\n\nconst left = <polyline points=\"15 18 9 12 15 6\" />;\nconst right = <polyline points=\"9 18 15 12 9 6\" />;\nconst maximize = <path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\" />;\nconst minimize = <path d=\"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3\" />;\nconst play = <polygon points=\"5 3 19 12 5 21 5 3\" />;\nconst pause = (\n  <React.Fragment>\n    <rect x=\"6\" y=\"4\" width=\"4\" height=\"16\" />\n    <rect x=\"14\" y=\"4\" width=\"4\" height=\"16\" />\n  </React.Fragment>\n);\n\nconst iconMapper = {\n  left,\n  right,\n  maximize,\n  minimize,\n  play,\n  pause,\n};\n\nconst SVG = (props) => {\n  const {\n    strokeWidth,\n    viewBox,\n    icon,\n  } = props;\n  return (\n    <svg\n      className=\"image-gallery-svg\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox={viewBox}\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth={strokeWidth}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      {iconMapper[icon]}\n    </svg>\n  );\n};\n\nSVG.propTypes = {\n  strokeWidth: number,\n  viewBox: string,\n  icon: oneOf([\n    'left',\n    'right',\n    'maximize',\n    'minimize',\n    'play',\n    'pause',\n  ]).isRequired,\n};\n\nSVG.defaultProps = {\n  strokeWidth: 1,\n  viewBox: '0 0 24 24',\n};\n\nexport default SVG;\n","import clsx from 'clsx';\nimport React from 'react';\nimport { Swipeable, LEFT, RIGHT } from 'react-swipeable';\nimport throttle from 'lodash.throttle';\nimport debounce from 'lodash.debounce';\nimport isEqual from 'lodash.isequal';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport {\n  arrayOf,\n  bool,\n  func,\n  node,\n  number,\n  oneOf,\n  shape,\n  string,\n} from 'prop-types';\nimport SVG from './SVG';\n\nconst screenChangeEvents = [\n  'fullscreenchange',\n  'MSFullscreenChange',\n  'mozfullscreenchange',\n  'webkitfullscreenchange',\n];\n\nconst imageSetType = arrayOf(shape({\n  srcSet: string,\n  media: string,\n}));\n\nfunction isEnterOrSpaceKey(event) {\n  const key = parseInt(event.keyCode || event.which || 0, 10);\n  const ENTER_KEY_CODE = 66;\n  const SPACEBAR_KEY_CODE = 62;\n  return key === ENTER_KEY_CODE || key === SPACEBAR_KEY_CODE;\n}\n\nexport default class ImageGallery extends React.Component {\n  static propTypes = {\n    flickThreshold: number,\n    items: arrayOf(shape({\n      bulletClass: string,\n      bulletOnClick: func,\n      description: string,\n      original: string.isRequired,\n      fullscreen: string,\n      originalAlt: string,\n      originalTitle: string,\n      thumbnail: string,\n      thumbnailAlt: string,\n      thumbnailLabel: string,\n      thumbnailTitle: string,\n      originalClass: string,\n      thumbnailClass: string,\n      renderItem: func,\n      renderThumbInner: func,\n      imageSet: imageSetType,\n      srcSet: string,\n      sizes: string,\n    })).isRequired,\n    showNav: bool,\n    autoPlay: bool,\n    lazyLoad: bool,\n    infinite: bool,\n    showIndex: bool,\n    showBullets: bool,\n    showThumbnails: bool,\n    showPlayButton: bool,\n    showFullscreenButton: bool,\n    disableThumbnailScroll: bool,\n    disableKeyDown: bool,\n    disableSwipe: bool,\n    useBrowserFullscreen: bool,\n    preventDefaultTouchmoveEvent: bool,\n    onErrorImageURL: string,\n    indexSeparator: string,\n    thumbnailPosition: oneOf(['top', 'bottom', 'left', 'right']),\n    startIndex: number,\n    slideDuration: number,\n    slideInterval: number,\n    slideOnThumbnailOver: bool,\n    swipeThreshold: number,\n    swipingTransitionDuration: number,\n    onSlide: func,\n    onBeforeSlide: func,\n    onScreenChange: func,\n    onPause: func,\n    onPlay: func,\n    onClick: func,\n    onImageLoad: func,\n    onImageError: func,\n    onTouchMove: func,\n    onTouchEnd: func,\n    onTouchStart: func,\n    onMouseOver: func,\n    onMouseLeave: func,\n    onWindowResize: func,\n    onThumbnailError: func,\n    onThumbnailClick: func,\n    renderCustomControls: func,\n    renderLeftNav: func,\n    renderRightNav: func,\n    renderPlayPauseButton: func,\n    renderFullscreenButton: func,\n    renderItem: func,\n    renderThumbInner: func,\n    stopPropagation: bool,\n    additionalClass: string,\n    useTranslate3D: bool,\n    isRTL: bool,\n  };\n\n  static defaultProps = {\n    onErrorImageURL: '',\n    additionalClass: '',\n    showNav: true,\n    autoPlay: false,\n    lazyLoad: false,\n    infinite: true,\n    showIndex: false,\n    showBullets: false,\n    showThumbnails: true,\n    showPlayButton: true,\n    showFullscreenButton: true,\n    disableThumbnailScroll: false,\n    disableKeyDown: false,\n    disableSwipe: false,\n    useTranslate3D: true,\n    isRTL: false,\n    useBrowserFullscreen: true,\n    preventDefaultTouchmoveEvent: false,\n    flickThreshold: 0.4,\n    stopPropagation: false,\n    indexSeparator: ' / ',\n    thumbnailPosition: 'bottom',\n    startIndex: 0,\n    slideDuration: 450,\n    swipingTransitionDuration: 0,\n    onSlide: null,\n    onBeforeSlide: null,\n    onScreenChange: null,\n    onPause: null,\n    onPlay: null,\n    onClick: null,\n    onImageLoad: null,\n    onImageError: null,\n    onTouchMove: null,\n    onTouchEnd: null,\n    onTouchStart: null,\n    onMouseOver: null,\n    onMouseLeave: null,\n    onWindowResize: null,\n    onThumbnailError: null,\n    onThumbnailClick: null,\n    renderCustomControls: null,\n    renderThumbInner: null,\n    renderItem: null,\n    slideInterval: 3000,\n    slideOnThumbnailOver: false,\n    swipeThreshold: 30,\n    renderLeftNav: (onClick, disabled) => (\n      <button\n        type=\"button\"\n        className=\"image-gallery-icon image-gallery-left-nav\"\n        disabled={disabled}\n        onClick={onClick}\n        aria-label=\"Previous Slide\"\n      >\n        <SVG icon=\"left\" viewBox=\"6 0 12 24\" />\n      </button>\n    ),\n    renderRightNav: (onClick, disabled) => (\n      <button\n        type=\"button\"\n        className=\"image-gallery-icon image-gallery-right-nav\"\n        disabled={disabled}\n        onClick={onClick}\n        aria-label=\"Next Slide\"\n      >\n        <SVG icon=\"right\" viewBox=\"6 0 12 24\" />\n      </button>\n    ),\n    renderPlayPauseButton: (onClick, isPlaying) => (\n      <button\n        type=\"button\"\n        className=\"image-gallery-icon image-gallery-play-button\"\n        onClick={onClick}\n        aria-label=\"Play or Pause Slideshow\"\n      >\n        <SVG strokeWidth={2} icon={isPlaying ? 'pause' : 'play'} />\n      </button>\n    ),\n    renderFullscreenButton: (onClick, isFullscreen) => (\n      <button\n        type=\"button\"\n        className=\"image-gallery-icon image-gallery-fullscreen-button\"\n        onClick={onClick}\n        aria-label=\"Open Fullscreen\"\n      >\n        <SVG strokeWidth={2} icon={isFullscreen ? 'minimize' : 'maximize'} />\n      </button>\n    ),\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentIndex: props.startIndex,\n      thumbsTranslate: 0,\n      currentSlideOffset: 0,\n      galleryWidth: 0,\n      thumbnailsWrapperWidth: 0,\n      thumbnailsWrapperHeight: 0,\n      isFullscreen: false,\n      isPlaying: false,\n    };\n    this.loadedImages = {};\n    this.imageGallery = React.createRef();\n    this.thumbnailsWrapper = React.createRef();\n    this.thumbnails = React.createRef();\n    this.imageGallerySlideWrapper = React.createRef();\n\n    // bindings\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleOnSwiped = this.handleOnSwiped.bind(this);\n    this.handleScreenChange = this.handleScreenChange.bind(this);\n    this.handleSwiping = this.handleSwiping.bind(this);\n    this.onThumbnailMouseLeave = this.onThumbnailMouseLeave.bind(this);\n    this.handleImageError = this.handleImageError.bind(this);\n    this.pauseOrPlay = this.pauseOrPlay.bind(this);\n    this.renderThumbInner = this.renderThumbInner.bind(this);\n    this.renderItem = this.renderItem.bind(this);\n    this.slideLeft = this.slideLeft.bind(this);\n    this.slideRight = this.slideRight.bind(this);\n    this.toggleFullScreen = this.toggleFullScreen.bind(this);\n    this.togglePlay = this.togglePlay.bind(this);\n\n    // Used to update the throttle if slideDuration changes\n    this.unthrottledSlideToIndex = this.slideToIndex;\n    this.slideToIndex = throttle(\n      this.unthrottledSlideToIndex, props.slideDuration, { trailing: false },\n    );\n\n    if (props.lazyLoad) {\n      this.lazyLoaded = [];\n    }\n  }\n\n  componentDidMount() {\n    const { autoPlay } = this.props;\n    if (autoPlay) {\n      this.play();\n    }\n    window.addEventListener('keydown', this.handleKeyDown);\n    window.addEventListener('mousedown', this.handleMouseDown);\n    this.initResizeObserver(this.imageGallerySlideWrapper);\n    this.addScreenChangeEvent();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      items,\n      lazyLoad,\n      slideDuration,\n      startIndex,\n      thumbnailPosition,\n      showThumbnails,\n    } = this.props;\n    const { currentIndex } = this.state;\n    const itemsSizeChanged = prevProps.items.length !== items.length;\n    const itemsChanged = !isEqual(prevProps.items, items);\n    const startIndexUpdated = prevProps.startIndex !== startIndex;\n    const thumbnailsPositionChanged = prevProps.thumbnailPosition !== thumbnailPosition;\n    const showThumbnailsChanged = prevProps.showThumbnails !== showThumbnails;\n\n    if (thumbnailsPositionChanged) {\n      // re-initialize resizeObserver because slides was unmounted and mounted again\n      this.removeResizeObserver();\n      this.initResizeObserver(this.imageGallerySlideWrapper);\n    }\n\n    if (itemsSizeChanged || showThumbnailsChanged) {\n      this.handleResize();\n    }\n    if (prevState.currentIndex !== currentIndex) {\n      this.slideThumbnailBar(prevState.currentIndex);\n    }\n    // if slideDuration changes, update slideToIndex throttle\n    if (prevProps.slideDuration !== slideDuration) {\n      this.slideToIndex = throttle(\n        this.unthrottledSlideToIndex, slideDuration, { trailing: false },\n      );\n    }\n    if (lazyLoad && (!prevProps.lazyLoad || itemsChanged)) {\n      this.lazyLoaded = [];\n    }\n\n    if (startIndexUpdated || itemsChanged) {\n      // TODO: this should be fix/removed if all it is doing\n      // is resetting the gallery currentIndext state\n      this.setState({ currentIndex: startIndex });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n    window.removeEventListener('mousedown', this.handleMouseDown);\n    this.removeScreenChangeEvent();\n    this.removeResizeObserver();\n    if (this.playPauseIntervalId) {\n      window.clearInterval(this.playPauseIntervalId);\n      this.playPauseIntervalId = null;\n    }\n    if (this.transitionTimer) {\n      window.clearTimeout(this.transitionTimer);\n    }\n  }\n\n  onSliding() {\n    const { currentIndex, isTransitioning } = this.state;\n    const { onSlide, slideDuration } = this.props;\n    this.transitionTimer = window.setTimeout(() => {\n      if (isTransitioning) {\n        this.setState({ isTransitioning: !isTransitioning });\n        if (onSlide) {\n          onSlide(currentIndex);\n        }\n      }\n    }, slideDuration + 50);\n  }\n\n  onThumbnailClick(event, index) {\n    const { onThumbnailClick } = this.props;\n    this.slideToIndex(index, event);\n    if (onThumbnailClick) {\n      onThumbnailClick(event, index);\n    }\n  }\n\n  onThumbnailMouseOver(event, index) {\n    if (this.thumbnailMouseOverTimer) {\n      window.clearTimeout(this.thumbnailMouseOverTimer);\n      this.thumbnailMouseOverTimer = null;\n    }\n    this.thumbnailMouseOverTimer = window.setTimeout(() => {\n      this.slideToIndex(index);\n      this.pause();\n    }, 300);\n  }\n\n  onThumbnailMouseLeave() {\n    if (this.thumbnailMouseOverTimer) {\n      const { autoPlay } = this.props;\n      window.clearTimeout(this.thumbnailMouseOverTimer);\n      this.thumbnailMouseOverTimer = null;\n      if (autoPlay) {\n        this.play();\n      }\n    }\n  }\n\n  setScrollDirection(dir) {\n    const { scrollingUpDown, scrollingLeftRight } = this.state;\n\n    if (!scrollingUpDown && !scrollingLeftRight) {\n      if (dir === LEFT || dir === RIGHT) {\n        this.setState({ scrollingLeftRight: true });\n      } else {\n        this.setState({ scrollingUpDown: true });\n      }\n    }\n  }\n\n  setThumbsTranslate(thumbsTranslate) {\n    this.setState({ thumbsTranslate });\n  }\n\n  setModalFullscreen(state) {\n    const { onScreenChange } = this.props;\n    this.setState({ modalFullscreen: state });\n    // manually call because browser does not support screenchange events\n    if (onScreenChange) {\n      onScreenChange(state);\n    }\n  }\n\n  getThumbsTranslate(indexDifference) {\n    const { disableThumbnailScroll, items } = this.props;\n    const { thumbnailsWrapperWidth, thumbnailsWrapperHeight } = this.state;\n    let totalScroll;\n    const thumbElement = this.thumbnails && this.thumbnails.current;\n\n    if (disableThumbnailScroll) return 0;\n\n    if (thumbElement) {\n      // total scroll required to see the last thumbnail\n      if (this.isThumbnailVertical()) {\n        if (thumbElement.scrollHeight <= thumbnailsWrapperHeight) {\n          return 0;\n        }\n        totalScroll = thumbElement.scrollHeight - thumbnailsWrapperHeight;\n      } else {\n        if (thumbElement.scrollWidth <= thumbnailsWrapperWidth || thumbnailsWrapperWidth <= 0) {\n          return 0;\n        }\n        totalScroll = thumbElement.scrollWidth - thumbnailsWrapperWidth;\n      }\n      // scroll-x required per index change\n      const perIndexScroll = totalScroll / (items.length - 1);\n      return indexDifference * perIndexScroll;\n    }\n    return 0;\n  }\n\n  getAlignmentClassName(index) {\n    // Necessary for lazing loading\n    const { currentIndex } = this.state;\n    const { infinite, items } = this.props;\n    let alignment = '';\n    const leftClassName = 'left';\n    const centerClassName = 'center';\n    const rightClassName = 'right';\n\n    switch (index) {\n      case (currentIndex - 1):\n        alignment = ` ${leftClassName}`;\n        break;\n      case (currentIndex):\n        alignment = ` ${centerClassName}`;\n        break;\n      case (currentIndex + 1):\n        alignment = ` ${rightClassName}`;\n        break;\n      default:\n        break;\n    }\n\n    if (items.length >= 3 && infinite) {\n      if (index === 0 && currentIndex === items.length - 1) {\n        // set first slide as right slide if were sliding right from last slide\n        alignment = ` ${rightClassName}`;\n      } else if (index === items.length - 1 && currentIndex === 0) {\n        // set last slide as left slide if were sliding left from first slide\n        alignment = ` ${leftClassName}`;\n      }\n    }\n\n    return alignment;\n  }\n\n  getTranslateXForTwoSlide(index) {\n    // For taking care of infinite swipe when there are only two slides\n    const { currentIndex, currentSlideOffset, previousIndex } = this.state;\n    const indexChanged = currentIndex !== previousIndex;\n    const firstSlideWasPrevSlide = index === 0 && previousIndex === 0;\n    const secondSlideWasPrevSlide = index === 1 && previousIndex === 1;\n    const firstSlideIsNextSlide = index === 0 && currentIndex === 1;\n    const secondSlideIsNextSlide = index === 1 && currentIndex === 0;\n    const swipingEnded = currentSlideOffset === 0;\n    const baseTranslateX = -100 * currentIndex;\n    let translateX = baseTranslateX + (index * 100) + currentSlideOffset;\n\n    // keep track of user swiping direction\n    // important to understand how to translateX based on last direction\n    if (currentSlideOffset > 0) {\n      this.direction = 'left';\n    } else if (currentSlideOffset < 0) {\n      this.direction = 'right';\n    }\n\n\n    // when swiping between two slides make sure the next and prev slides\n    // are on both left and right\n    if (secondSlideIsNextSlide && currentSlideOffset > 0) { // swiping right\n      translateX = -100 + currentSlideOffset;\n    }\n    if (firstSlideIsNextSlide && currentSlideOffset < 0) { // swiping left\n      translateX = 100 + currentSlideOffset;\n    }\n\n    if (indexChanged) {\n      // when indexChanged move the slide to the correct side\n      if (firstSlideWasPrevSlide && swipingEnded && this.direction === 'left') {\n        translateX = 100;\n      } else if (secondSlideWasPrevSlide && swipingEnded && this.direction === 'right') {\n        translateX = -100;\n      }\n    } else {\n      // keep the slide on the correct side if the swipe was not successful\n      if (secondSlideIsNextSlide && swipingEnded && this.direction === 'left') {\n        translateX = -100;\n      }\n      if (firstSlideIsNextSlide && swipingEnded && this.direction === 'right') {\n        translateX = 100;\n      }\n    }\n\n    return translateX;\n  }\n\n  getThumbnailBarHeight() {\n    if (this.isThumbnailVertical()) {\n      const { gallerySlideWrapperHeight } = this.state;\n      return { height: gallerySlideWrapperHeight };\n    }\n    return {};\n  }\n\n  getSlideStyle(index) {\n    const { currentIndex, currentSlideOffset, slideStyle } = this.state;\n    const {\n      infinite,\n      items,\n      useTranslate3D,\n      isRTL,\n    } = this.props;\n    const baseTranslateX = -100 * currentIndex;\n    const totalSlides = items.length - 1;\n\n    // calculates where the other slides belong based on currentIndex\n    // if it is RTL the base line should be reversed\n    let translateX = (baseTranslateX + (index * 100)) * (isRTL ? -1 : 1) + currentSlideOffset;\n\n    if (infinite && items.length > 2) {\n      if (currentIndex === 0 && index === totalSlides) {\n        // make the last slide the slide before the first\n        // if it is RTL the base line should be reversed\n        translateX = -100 * (isRTL ? -1 : 1) + currentSlideOffset;\n      } else if (currentIndex === totalSlides && index === 0) {\n        // make the first slide the slide after the last\n        // if it is RTL the base line should be reversed\n        translateX = 100 * (isRTL ? -1 : 1) + currentSlideOffset;\n      }\n    }\n\n    // Special case when there are only 2 items with infinite on\n    if (infinite && items.length === 2) {\n      translateX = this.getTranslateXForTwoSlide(index);\n    }\n\n    let translate = `translate(${translateX}%, 0)`;\n\n    if (useTranslate3D) {\n      translate = `translate3d(${translateX}%, 0, 0)`;\n    }\n\n    return Object.assign({}, {\n      WebkitTransform: translate,\n      MozTransform: translate,\n      msTransform: translate,\n      OTransform: translate,\n      transform: translate,\n    }, slideStyle);\n  }\n\n  getCurrentIndex() {\n    const { currentIndex } = this.state;\n    return currentIndex;\n  }\n\n  getThumbnailStyle() {\n    let translate;\n    const { useTranslate3D, isRTL } = this.props;\n    const { thumbsTranslate } = this.state;\n    const verticalTranslateValue = isRTL ? thumbsTranslate * -1 : thumbsTranslate;\n\n    if (this.isThumbnailVertical()) {\n      translate = `translate(0, ${thumbsTranslate}px)`;\n      if (useTranslate3D) {\n        translate = `translate3d(0, ${thumbsTranslate}px, 0)`;\n      }\n    } else {\n      translate = `translate(${verticalTranslateValue}px, 0)`;\n      if (useTranslate3D) {\n        translate = `translate3d(${verticalTranslateValue}px, 0, 0)`;\n      }\n    }\n    return {\n      WebkitTransform: translate,\n      MozTransform: translate,\n      msTransform: translate,\n      OTransform: translate,\n      transform: translate,\n    };\n  }\n\n  getSlideItems() {\n    const { currentIndex } = this.state;\n    const {\n      infinite,\n      items,\n      slideOnThumbnailOver,\n      onClick,\n      lazyLoad,\n      onTouchMove,\n      onTouchEnd,\n      onTouchStart,\n      onMouseOver,\n      onMouseLeave,\n      renderItem,\n      renderThumbInner,\n      showThumbnails,\n      showBullets,\n    } = this.props;\n\n    const slides = [];\n    const thumbnails = [];\n    const bullets = [];\n\n    items.forEach((item, index) => {\n      const alignment = this.getAlignmentClassName(index);\n      const originalClass = item.originalClass ? ` ${item.originalClass}` : '';\n      const thumbnailClass = item.thumbnailClass ? ` ${item.thumbnailClass}` : '';\n      const handleRenderItem = item.renderItem || renderItem || this.renderItem;\n      const handleRenderThumbInner = item.renderThumbInner\n        || renderThumbInner || this.renderThumbInner;\n\n      const showItem = !lazyLoad || alignment || this.lazyLoaded[index];\n      if (showItem && lazyLoad && !this.lazyLoaded[index]) {\n        this.lazyLoaded[index] = true;\n      }\n\n      const slideStyle = this.getSlideStyle(index);\n\n      const slide = (\n        <div\n          // aria-label={`Go to Slide ${index + 1}`}\n          key={`slide-${item.original}-${index}`}\n          tabIndex=\"-1\"\n          className={`image-gallery-slide ${alignment} ${originalClass}`}\n          style={slideStyle}\n          onClick={onClick}\n          onKeyUp={this.handleSlideKeyUp}\n          onTouchMove={onTouchMove}\n          onTouchEnd={onTouchEnd}\n          onTouchStart={onTouchStart}\n          onMouseOver={onMouseOver}\n          onFocus={onMouseOver}\n          onMouseLeave={onMouseLeave}\n          role=\"button\"\n        >\n          {showItem ? handleRenderItem(item) : <div style={{ height: '100%' }} />}\n        </div>\n      );\n\n      if (infinite) {\n        // don't add some slides while transitioning to avoid background transitions\n        if (this.shouldPushSlideOnInfiniteMode(index)) {\n          slides.push(slide);\n        }\n      } else {\n        slides.push(slide);\n      }\n\n      if (showThumbnails) {\n        const igThumbnailClass = clsx(\n          'image-gallery-thumbnail',\n          thumbnailClass,\n          { active: currentIndex === index },\n        );\n        thumbnails.push(\n          <button\n            key={`thumbnail-${item.original}-${index}`}\n            type=\"button\"\n            tabIndex=\"0\"\n            aria-pressed={currentIndex === index ? 'true' : 'false'}\n            aria-label={`Go to Slide ${index + 1}`}\n            className={igThumbnailClass}\n            onMouseLeave={slideOnThumbnailOver ? this.onThumbnailMouseLeave : null}\n            onMouseOver={event => this.handleThumbnailMouseOver(event, index)}\n            onFocus={event => this.handleThumbnailMouseOver(event, index)}\n            onKeyUp={event => this.handleThumbnailKeyUp(event, index)}\n            onClick={event => this.onThumbnailClick(event, index)}\n          >\n            {handleRenderThumbInner(item)}\n          </button>,\n        );\n      }\n\n      if (showBullets) {\n        // generate bullet elements and store them in array\n        const bulletOnClick = (event) => {\n          if (item.bulletOnClick) {\n            item.bulletOnClick({ item, itemIndex: index, currentIndex });\n          }\n          return this.slideToIndex.call(this, index, event);\n        };\n        const igBulletClass = clsx(\n          'image-gallery-bullet',\n          item.bulletClass,\n          { active: currentIndex === index },\n        );\n        bullets.push(\n          <button\n            type=\"button\"\n            key={`bullet-${item.original}-${index}`}\n            className={igBulletClass}\n            onClick={bulletOnClick}\n            aria-pressed={currentIndex === index ? 'true' : 'false'}\n            aria-label={`Go to Slide ${index + 1}`}\n          />,\n        );\n      }\n    });\n\n    return {\n      slides,\n      thumbnails,\n      bullets,\n    };\n  }\n\n  ignoreIsTransitioning() {\n    /*\n      Ignore isTransitioning because were not going to sibling slides\n      e.g. center to left or center to right\n    */\n    const { items } = this.props;\n    const { previousIndex, currentIndex } = this.state;\n    const totalSlides = items.length - 1;\n    // we want to show the in between slides transition\n    const slidingMoreThanOneSlideLeftOrRight = Math.abs(previousIndex - currentIndex) > 1;\n    const notGoingFromFirstToLast = !(previousIndex === 0 && currentIndex === totalSlides);\n    const notGoingFromLastToFirst = !(previousIndex === totalSlides && currentIndex === 0);\n\n    return slidingMoreThanOneSlideLeftOrRight\n      && notGoingFromFirstToLast\n      && notGoingFromLastToFirst;\n  }\n\n  isFirstOrLastSlide(index) {\n    const { items } = this.props;\n    const totalSlides = items.length - 1;\n    const isLastSlide = index === totalSlides;\n    const isFirstSlide = index === 0;\n    return isLastSlide || isFirstSlide;\n  }\n\n\n  slideIsTransitioning(index) {\n    /*\n    returns true if the gallery is transitioning and the index is not the\n    previous or currentIndex\n    */\n    const { isTransitioning, previousIndex, currentIndex } = this.state;\n    const indexIsNotPreviousOrNextSlide = !(index === previousIndex || index === currentIndex);\n    return isTransitioning && indexIsNotPreviousOrNextSlide;\n  }\n\n  shouldPushSlideOnInfiniteMode(index) {\n    /*\n      Push (show) slide if slide is the current slide and the next slide\n      OR\n      The slide is going more than one slide left or right, but not going from\n      first to last and not going from last to first\n\n      Edge case:\n      If you go to the first or last slide, when they're\n      not left, or right of each other they will try to catch up in the background\n      so unless were going from first to last or vice versa we don't want the first\n      or last slide to show up during the transition\n    */\n    return !this.slideIsTransitioning(index)\n      || (this.ignoreIsTransitioning() && !this.isFirstOrLastSlide(index));\n  }\n\n  slideThumbnailBar(previousIndex) {\n    const { thumbsTranslate, currentIndex } = this.state;\n    if (currentIndex === 0) {\n      this.setThumbsTranslate(0);\n    } else {\n      const indexDifference = Math.abs(previousIndex - currentIndex);\n      const scroll = this.getThumbsTranslate(indexDifference);\n      if (scroll > 0) {\n        if (previousIndex < currentIndex) {\n          this.setThumbsTranslate(thumbsTranslate - scroll);\n        } else if (previousIndex > currentIndex) {\n          this.setThumbsTranslate(thumbsTranslate + scroll);\n        }\n      }\n    }\n  }\n\n  canSlide() {\n    const { items } = this.props;\n    return items.length >= 2;\n  }\n\n  canSlideLeft() {\n    const { infinite, isRTL } = this.props;\n    return infinite || (isRTL ? this.canSlideNext() : this.canSlidePrevious());\n  }\n\n  canSlideRight() {\n    const { infinite, isRTL } = this.props;\n    return infinite || (isRTL ? this.canSlidePrevious() : this.canSlideNext());\n  }\n\n  canSlidePrevious() {\n    const { currentIndex } = this.state;\n    return currentIndex > 0;\n  }\n\n  canSlideNext() {\n    const { currentIndex } = this.state;\n    const { items } = this.props;\n    return currentIndex < items.length - 1;\n  }\n\n  handleSwiping({ event, absX, dir }) {\n    const { preventDefaultTouchmoveEvent, disableSwipe, stopPropagation } = this.props;\n    const {\n      galleryWidth,\n      isTransitioning,\n      scrollingUpDown,\n      scrollingLeftRight,\n    } = this.state;\n\n    if (disableSwipe) return;\n    const { swipingTransitionDuration } = this.props;\n    this.setScrollDirection(dir);\n    if (stopPropagation) event.stopPropagation();\n    if ((preventDefaultTouchmoveEvent || scrollingLeftRight) && event.cancelable) {\n      event.preventDefault();\n    }\n    if (!isTransitioning && !scrollingUpDown) {\n      const side = dir === RIGHT ? 1 : -1;\n\n      let currentSlideOffset = (absX / galleryWidth * 100);\n      if (Math.abs(currentSlideOffset) >= 100) {\n        currentSlideOffset = 100;\n      }\n\n      const swipingTransition = {\n        transition: `transform ${swipingTransitionDuration}ms ease-out`,\n      };\n\n      this.setState({\n        currentSlideOffset: side * currentSlideOffset,\n        slideStyle: swipingTransition,\n      });\n    } else {\n      // don't move the slide\n      this.setState({ currentSlideOffset: 0 });\n    }\n  }\n\n  sufficientSwipe() {\n    const { currentSlideOffset } = this.state;\n    const { swipeThreshold } = this.props;\n    return Math.abs(currentSlideOffset) > swipeThreshold;\n  }\n\n  handleOnSwiped({ event, dir, velocity }) {\n    const { disableSwipe, stopPropagation, flickThreshold } = this.props;\n    const { scrollingUpDown, scrollingLeftRight } = this.state;\n\n    if (disableSwipe) return;\n\n    const { isRTL } = this.props;\n    if (stopPropagation) event.stopPropagation();\n    if (scrollingUpDown) {\n      // user stopped scrollingUpDown\n      this.setState({ scrollingUpDown: false });\n    }\n\n    if (scrollingLeftRight) {\n      // user stopped scrollingLeftRight\n      this.setState({ scrollingLeftRight: false });\n    }\n\n    if (!scrollingUpDown) { // don't swipe if user is scrolling\n      // if it is RTL the direction is reversed\n      const swipeDirection = (dir === LEFT ? 1 : -1) * (isRTL ? -1 : 1);\n      const isFlick = velocity > flickThreshold;\n      this.handleOnSwipedTo(swipeDirection, isFlick);\n    }\n  }\n\n  handleOnSwipedTo(swipeDirection, isFlick) {\n    const { currentIndex, isTransitioning } = this.state;\n    let slideTo = currentIndex;\n\n    if ((this.sufficientSwipe() || isFlick) && !isTransitioning) {\n      // slideto the next/prev slide\n      slideTo += swipeDirection;\n    }\n\n    // If we can't swipe left or right, stay in the current index (noop)\n    if ((swipeDirection === -1 && !this.canSlideLeft())\n        || (swipeDirection === 1 && !this.canSlideRight())) {\n      slideTo = currentIndex;\n    }\n\n    this.unthrottledSlideToIndex(slideTo);\n  }\n\n  handleMouseDown() {\n    // keep track of mouse vs keyboard usage for a11y\n    this.imageGallery.current.classList.add('image-gallery-using-mouse');\n  }\n\n  handleKeyDown(event) {\n    const { disableKeyDown, useBrowserFullscreen } = this.props;\n    const { isFullscreen } = this.state;\n    // keep track of mouse vs keyboard usage for a11y\n    this.imageGallery.current.classList.remove('image-gallery-using-mouse');\n\n    if (disableKeyDown) return;\n    const LEFT_ARROW = 37;\n    const RIGHT_ARROW = 39;\n    const ESC_KEY = 27;\n    const key = parseInt(event.keyCode || event.which || 0, 10);\n\n    switch (key) {\n      case LEFT_ARROW:\n        if (this.canSlideLeft() && !this.playPauseIntervalId) {\n          this.slideLeft(event);\n        }\n        break;\n      case RIGHT_ARROW:\n        if (this.canSlideRight() && !this.playPauseIntervalId) {\n          this.slideRight(event);\n        }\n        break;\n      case ESC_KEY:\n        if (isFullscreen && !useBrowserFullscreen) {\n          this.exitFullScreen();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  handleImageError(event) {\n    const { onErrorImageURL } = this.props;\n    if (onErrorImageURL && event.target.src.indexOf(onErrorImageURL) === -1) {\n      /* eslint-disable no-param-reassign */\n      event.target.src = onErrorImageURL;\n      /* eslint-enable no-param-reassign */\n    }\n  }\n\n  removeResizeObserver() {\n    if (this.resizeObserver\n        && this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\n      this.resizeObserver.unobserve(this.imageGallerySlideWrapper.current);\n    }\n  }\n\n  handleResize() {\n    const { currentIndex } = this.state;\n    const { onWindowResize } = this.props;\n    if (this.imageGallery && this.imageGallery.current) {\n      this.setState({ galleryWidth: this.imageGallery.current.offsetWidth });\n    }\n\n    if (this.imageGallerySlideWrapper && this.imageGallerySlideWrapper.current) {\n      this.setState({\n        gallerySlideWrapperHeight: this.imageGallerySlideWrapper.current.offsetHeight,\n      });\n    }\n\n    if (this.thumbnailsWrapper && this.thumbnailsWrapper.current) {\n      if (this.isThumbnailVertical()) {\n        this.setState({ thumbnailsWrapperHeight: this.thumbnailsWrapper.current.offsetHeight });\n      } else {\n        this.setState({ thumbnailsWrapperWidth: this.thumbnailsWrapper.current.offsetWidth });\n      }\n    }\n\n    if (this.thumbnailsWrapper && this.thumbnailsWrapper.current && onWindowResize) {\n      onWindowResize(this.state);\n    }\n\n    // Adjust thumbnail container when thumbnail width or height is adjusted\n    this.setThumbsTranslate(-this.getThumbsTranslate(currentIndex));\n  }\n\n  initResizeObserver(element) {\n    this.resizeObserver = new ResizeObserver(debounce((entries) => {\n      if (!entries) return;\n      entries.forEach(() => {\n        this.handleResize();\n      });\n    }, 300));\n    this.resizeObserver.observe(element.current);\n  }\n\n  toggleFullScreen() {\n    const { isFullscreen } = this.state;\n    if (isFullscreen) {\n      this.exitFullScreen();\n    } else {\n      this.fullScreen();\n    }\n  }\n\n  togglePlay() {\n    if (this.playPauseIntervalId) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n\n\n  handleScreenChange() {\n    /*\n      handles screen change events that the browser triggers e.g. esc key\n    */\n    const { onScreenChange, useBrowserFullscreen } = this.props;\n    const fullScreenElement = document.fullscreenElement\n      || document.msFullscreenElement\n      || document.mozFullScreenElement\n      || document.webkitFullscreenElement;\n\n    // check if screenchange element is the gallery\n    const isFullscreen = this.imageGallery.current === fullScreenElement;\n    if (onScreenChange) onScreenChange(isFullscreen);\n    if (useBrowserFullscreen) this.setState({ isFullscreen });\n  }\n\n  slideToIndex(index, event) {\n    const { currentIndex, isTransitioning } = this.state;\n    const { items, slideDuration, onBeforeSlide } = this.props;\n\n    if (!isTransitioning) {\n      if (event) {\n        if (this.playPauseIntervalId) {\n          // user triggered event while ImageGallery is playing, reset interval\n          this.pause(false);\n          this.play(false);\n        }\n      }\n\n      const slideCount = items.length - 1;\n      let nextIndex = index;\n      if (index < 0) {\n        nextIndex = slideCount;\n      } else if (index > slideCount) {\n        nextIndex = 0;\n      }\n\n      if (onBeforeSlide && nextIndex !== currentIndex) {\n        onBeforeSlide(nextIndex);\n      }\n\n      this.setState({\n        previousIndex: currentIndex,\n        currentIndex: nextIndex,\n        isTransitioning: nextIndex !== currentIndex,\n        currentSlideOffset: 0,\n        slideStyle: { transition: `all ${slideDuration}ms ease-out` },\n      }, this.onSliding);\n    }\n  }\n\n  slideLeft(event) {\n    const { isRTL } = this.props;\n    if (isRTL) {\n      this.slideNext(event);\n    } else {\n      this.slidePrevious(event);\n    }\n  }\n\n  slideRight(event) {\n    const { isRTL } = this.props;\n    if (isRTL) {\n      this.slidePrevious(event);\n    } else {\n      this.slideNext(event);\n    }\n  }\n\n  slidePrevious(event) {\n    const { currentIndex, currentSlideOffset, isTransitioning } = this.state;\n    const { items } = this.props;\n    const nextIndex = currentIndex - 1;\n\n    if (isTransitioning) return;\n\n    if (items.length === 2) {\n      /*\n        When there are only 2 slides fake a tiny swipe to get the slides\n        on the correct side for transitioning\n      */\n      this.setState({\n        currentSlideOffset: currentSlideOffset + 0.001, // this will reset once index changes\n        slideStyle: { transition: 'none' }, // move the slide over instantly\n      }, () => {\n        // add 25ms timeout to avoid delay in moving slides over\n        window.setTimeout(() => this.slideToIndex(nextIndex, event), 25);\n      });\n    } else {\n      this.slideToIndex(nextIndex, event);\n    }\n  }\n\n  slideNext(event) {\n    const { currentIndex, currentSlideOffset, isTransitioning } = this.state;\n    const { items } = this.props;\n    const nextIndex = currentIndex + 1;\n\n    if (isTransitioning) return;\n\n    if (items.length === 2) {\n      // same as above for 2 slides\n      this.setState({\n        currentSlideOffset: currentSlideOffset - 0.001,\n        slideStyle: { transition: 'none' },\n      }, () => {\n        window.setTimeout(() => this.slideToIndex(nextIndex, event), 25);\n      });\n    } else {\n      this.slideToIndex(nextIndex, event);\n    }\n  }\n\n  handleThumbnailMouseOver(event, index) {\n    const { slideOnThumbnailOver } = this.props;\n    if (slideOnThumbnailOver) this.onThumbnailMouseOver(event, index);\n  }\n\n  handleThumbnailKeyUp(event, index) {\n    // a11y support ^_^\n    if (isEnterOrSpaceKey(event)) this.onThumbnailClick(event, index);\n  }\n\n  handleSlideKeyUp(event) {\n    // a11y support ^_^\n    if (isEnterOrSpaceKey(event)) {\n      const { onClick } = this.props;\n      onClick(event);\n    }\n  }\n\n  isThumbnailVertical() {\n    const { thumbnailPosition } = this.props;\n    return thumbnailPosition === 'left' || thumbnailPosition === 'right';\n  }\n\n  addScreenChangeEvent() {\n    screenChangeEvents.forEach((eventName) => {\n      document.addEventListener(eventName, this.handleScreenChange);\n    });\n  }\n\n  removeScreenChangeEvent() {\n    screenChangeEvents.forEach((eventName) => {\n      document.removeEventListener(eventName, this.handleScreenChange);\n    });\n  }\n\n  fullScreen() {\n    const { useBrowserFullscreen } = this.props;\n    const gallery = this.imageGallery.current;\n    if (useBrowserFullscreen) {\n      if (gallery.requestFullscreen) {\n        gallery.requestFullscreen();\n      } else if (gallery.msRequestFullscreen) {\n        gallery.msRequestFullscreen();\n      } else if (gallery.mozRequestFullScreen) {\n        gallery.mozRequestFullScreen();\n      } else if (gallery.webkitRequestFullscreen) {\n        gallery.webkitRequestFullscreen();\n      } else {\n        // fallback to fullscreen modal for unsupported browsers\n        this.setModalFullscreen(true);\n      }\n    } else {\n      this.setModalFullscreen(true);\n    }\n    this.setState({ isFullscreen: true });\n  }\n\n  exitFullScreen() {\n    const { isFullscreen } = this.state;\n    const { useBrowserFullscreen } = this.props;\n    if (isFullscreen) {\n      if (useBrowserFullscreen) {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        } else {\n          // fallback to fullscreen modal for unsupported browsers\n          this.setModalFullscreen(false);\n        }\n      } else {\n        this.setModalFullscreen(false);\n      }\n      this.setState({ isFullscreen: false });\n    }\n  }\n\n  pauseOrPlay() {\n    const { infinite } = this.props;\n    const { currentIndex } = this.state;\n    if (!infinite && !this.canSlideRight()) {\n      this.pause();\n    } else {\n      this.slideToIndex(currentIndex + 1);\n    }\n  }\n\n  play(shouldCallOnPlay = true) {\n    const {\n      onPlay,\n      slideInterval,\n      slideDuration,\n    } = this.props;\n    const { currentIndex } = this.state;\n    if (!this.playPauseIntervalId) {\n      this.setState({ isPlaying: true });\n      this.playPauseIntervalId = window.setInterval(\n        this.pauseOrPlay,\n        Math.max(slideInterval, slideDuration),\n      );\n      if (onPlay && shouldCallOnPlay) {\n        onPlay(currentIndex);\n      }\n    }\n  }\n\n  pause(shouldCallOnPause = true) {\n    const { onPause } = this.props;\n    const { currentIndex } = this.state;\n    if (this.playPauseIntervalId) {\n      window.clearInterval(this.playPauseIntervalId);\n      this.playPauseIntervalId = null;\n      this.setState({ isPlaying: false });\n      if (onPause && shouldCallOnPause) {\n        onPause(currentIndex);\n      }\n    }\n  }\n\n  isImageLoaded(item) {\n    /*\n      Keep track of images loaded so that onImageLoad prop is not\n      called multiple times when re-render the images\n    */\n    const imageExists = this.loadedImages[item.original];\n    if (imageExists) {\n      return true;\n    }\n    // add image as loaded\n    this.loadedImages[item.original] = true;\n    return false;\n  }\n\n  handleImageLoaded(event, item) {\n    const { onImageLoad } = this.props;\n    const imageExists = this.loadedImages[item.original];\n    if (!imageExists && onImageLoad) {\n      this.loadedImages[item.original] = true; // prevent from call again\n      // image just loaded, call onImageLoad\n      onImageLoad(event);\n    }\n  }\n\n  renderItem(item) {\n    const { isFullscreen } = this.state;\n    const { onImageError } = this.props;\n    const handleImageError = onImageError || this.handleImageError;\n    const itemSrc = isFullscreen ? (item.fullscreen || item.original) : item.original;\n\n    return (\n      <div>\n        {\n          item.imageSet ? (\n            <picture\n              onLoad={event => this.handleImageLoaded(event, item)}\n              onError={handleImageError}\n            >\n              {\n                item.imageSet.map((source, index) => (\n                  <source\n                    key={`media-${source.srcSet}-${index}`}\n                    media={source.media}\n                    srcSet={source.srcSet}\n                    type={source.type}\n                  />\n                ))\n              }\n              <img\n                className=\"image-gallery-image\"\n                alt={item.originalAlt}\n                src={itemSrc}\n              />\n            </picture>\n          ) : (\n            <img\n              className=\"image-gallery-image\"\n              src={itemSrc}\n              alt={item.originalAlt}\n              srcSet={item.srcSet}\n              sizes={item.sizes}\n              title={item.originalTitle}\n              onLoad={event => this.handleImageLoaded(event, item)}\n              onError={handleImageError}\n            />\n          )\n        }\n\n        {\n          item.description && (\n            <span className=\"image-gallery-description\">\n              {item.description}\n            </span>\n          )\n        }\n      </div>\n    );\n  }\n\n  renderThumbInner(item) {\n    const { onThumbnailError } = this.props;\n    const handleThumbnailError = onThumbnailError || this.handleImageError;\n\n    return (\n      <div className=\"image-gallery-thumbnail-inner\">\n        <img\n          className=\"image-gallery-thumbnail-image\"\n          src={item.thumbnail}\n          alt={item.thumbnailAlt}\n          title={item.thumbnailTitle}\n          onError={handleThumbnailError}\n        />\n        {\n          item.thumbnailLabel && (\n            <div className=\"image-gallery-thumbnail-label\">\n              {item.thumbnailLabel}\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      currentIndex,\n      isFullscreen,\n      modalFullscreen,\n      isPlaying,\n    } = this.state;\n\n    const {\n      additionalClass,\n      indexSeparator, // deprecate soon, and allow custom render\n      isRTL,\n      items,\n      thumbnailPosition,\n      renderFullscreenButton,\n      renderCustomControls,\n      renderLeftNav,\n      renderRightNav,\n      showBullets,\n      showFullscreenButton,\n      showIndex,\n      showThumbnails,\n      showNav,\n      showPlayButton,\n      renderPlayPauseButton,\n    } = this.props;\n\n    const thumbnailStyle = this.getThumbnailStyle();\n    const { slides, thumbnails, bullets } = this.getSlideItems();\n    const slideWrapperClass = clsx(\n      'image-gallery-slide-wrapper',\n      thumbnailPosition,\n      { 'image-gallery-rtl': isRTL },\n    );\n\n    const slideWrapper = (\n      <div ref={this.imageGallerySlideWrapper} className={slideWrapperClass}>\n        {/*renderCustomControls && renderCustomControls()*/}\n        {\n          this.canSlide() ? (\n            <React.Fragment>\n              {\n                showNav && (\n                  <React.Fragment>\n                    {renderLeftNav(this.slideLeft, !this.canSlideLeft())}\n                    {renderRightNav(this.slideRight, !this.canSlideRight())}\n                  </React.Fragment>\n                )\n              }\n              <Swipeable\n                className=\"image-gallery-swipe\"\n                delta={0}\n                onSwiping={this.handleSwiping}\n                onSwiped={this.handleOnSwiped}\n              >\n                <div className=\"image-gallery-slides\">\n                  {slides}\n                </div>\n              </Swipeable>\n            </React.Fragment>\n          ) : (\n            <div className=\"image-gallery-slides\">\n              {slides}\n            </div>\n          )\n        }\n        {showPlayButton && renderPlayPauseButton(this.togglePlay, isPlaying)}\n        {\n          showBullets && (\n            <div className=\"image-gallery-bullets\">\n              <div\n                className=\"image-gallery-bullets-container\"\n                role=\"navigation\"\n                aria-label=\"Bullet Navigation\"\n              >\n                {bullets}\n              </div>\n            </div>\n          )\n        }\n        {showFullscreenButton && renderFullscreenButton(this.toggleFullScreen, isFullscreen)}\n        {\n          showIndex && (\n            <div className=\"image-gallery-index\">\n              <span className=\"image-gallery-index-current\">\n                {currentIndex + 1}\n              </span>\n              <span className=\"image-gallery-index-separator\">\n                {indexSeparator}\n              </span>\n              <span className=\"image-gallery-index-total\">\n                {items.length}\n              </span>\n            </div>\n          )\n        }\n      </div>\n    );\n\n    const igClass = clsx('image-gallery', additionalClass, { 'fullscreen-modal': modalFullscreen });\n    const igContentClass = clsx('image-gallery-content', thumbnailPosition, { fullscreen: isFullscreen });\n    const thumbnailWrapperClass = clsx(\n      'image-gallery-thumbnails-wrapper',\n      thumbnailPosition,\n      { 'thumbnails-wrapper-rtl': !this.isThumbnailVertical() && isRTL },\n    );\n    return (\n      <div\n        ref={this.imageGallery}\n        className={igClass}\n        aria-live=\"polite\"\n      >\n        {renderCustomControls && renderCustomControls()}\n        <div className={igContentClass}>\n          {(thumbnailPosition === 'bottom' || thumbnailPosition === 'right') && slideWrapper}\n          {\n            showThumbnails && (\n              <div\n                className={thumbnailWrapperClass}\n                style={this.getThumbnailBarHeight()}\n              >\n                <div\n                  className=\"image-gallery-thumbnails\"\n                  ref={this.thumbnailsWrapper}\n                >\n                  <div\n                    ref={this.thumbnails}\n                    className=\"image-gallery-thumbnails-container\"\n                    style={thumbnailStyle}\n                    aria-label=\"Thumbnail Navigation\"\n                  >\n                    {thumbnails}\n                  </div>\n                </div>\n              </div>\n            )\n          }\n          {(thumbnailPosition === 'top' || thumbnailPosition === 'left') && slideWrapper}\n        </div>\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport ImageGallery from './ImageGallery';\n\nconst PREFIX_URL = 'https://raw.githubusercontent.com/xiaolin/react-image-gallery/master/static/';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      showIndex: false,\n      showBullets: true,\n      infinite: true,\n      showThumbnails: true,\n      showFullscreenButton: true,\n      showGalleryFullscreenButton: true,\n      showPlayButton: true,\n      showGalleryPlayButton: true,\n      showNav: true,\n      isRTL: false,\n      slideDuration: 450,\n      slideInterval: 2000,\n      slideOnThumbnailOver: false,\n      thumbnailPosition: 'bottom',\n      showVideo: {},\n    };\n\n    this.images = [\n      {\n        thumbnail: `${PREFIX_URL}4v.jpg`,\n        original: `${PREFIX_URL}4v.jpg`,\n        embedUrl: 'https://www.youtube.com/embed/4pSzhZ76GdM?autoplay=1&showinfo=0',\n        description: 'Render custom slides within the gallery',\n        renderItem: this._renderVideo.bind(this)\n      },\n      {\n        original: `${PREFIX_URL}image_set_default.jpg`,\n        thumbnail: `${PREFIX_URL}image_set_thumb.jpg`,\n        imageSet: [\n          {\n            srcSet: `${PREFIX_URL}image_set_cropped.jpg`,\n            media : '(max-width: 1280px)',\n          },\n          {\n            srcSet: `${PREFIX_URL}image_set_default.jpg`,\n            media : '(min-width: 1280px)',\n          }\n        ]\n      },\n      {\n        original: `${PREFIX_URL}1.jpg`,\n        thumbnail: `${PREFIX_URL}1t.jpg`,\n        originalClass: 'featured-slide',\n        thumbnailClass: 'featured-thumb',\n        description: 'Custom class for slides & thumbnails'\n      },\n    ].concat(this._getStaticImages());\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.slideInterval !== prevState.slideInterval ||\n        this.state.slideDuration !== prevState.slideDuration) {\n      // refresh setInterval\n      this._imageGallery.pause();\n      this._imageGallery.play();\n    }\n  }\n\n  _onImageClick(event) {\n    console.debug('clicked on image', event.target, 'at index', this._imageGallery.getCurrentIndex());\n  }\n\n  _onImageLoad(event) {\n    console.debug('loaded image', event.target.src);\n  }\n\n  _onSlide(index) {\n    this._resetVideo();\n    console.debug('slid to index', index);\n  }\n\n  _onPause(index) {\n    console.debug('paused on index', index);\n  }\n\n  _onScreenChange(fullScreenElement) {\n    console.debug('isFullScreen?', !!fullScreenElement);\n  }\n\n  _onPlay(index) {\n    console.debug('playing from index', index);\n  }\n\n  _handleInputChange(state, event) {\n    this.setState({[state]: event.target.value});\n  }\n\n  _handleCheckboxChange(state, event) {\n    this.setState({[state]: event.target.checked});\n  }\n\n  _handleThumbnailPositionChange(event) {\n    this.setState({thumbnailPosition: event.target.value});\n  }\n\n  _getStaticImages() {\n    let images = [];\n    for (let i = 2; i < 12; i++) {\n      images.push({\n        original: `${PREFIX_URL}${i}.jpg`,\n        thumbnail:`${PREFIX_URL}${i}t.jpg`\n      });\n    }\n\n    return images;\n  }\n\n  _resetVideo() {\n    this.setState({showVideo: {}});\n\n    if (this.state.showPlayButton) {\n      this.setState({showGalleryPlayButton: true});\n    }\n\n    if (this.state.showFullscreenButton) {\n      this.setState({showGalleryFullscreenButton: true});\n    }\n  }\n\n  _toggleShowVideo(url) {\n    this.state.showVideo[url] = !Boolean(this.state.showVideo[url]);\n    this.setState({\n      showVideo: this.state.showVideo\n    });\n\n    if (this.state.showVideo[url]) {\n      if (this.state.showPlayButton) {\n        this.setState({showGalleryPlayButton: false});\n      }\n\n      if (this.state.showFullscreenButton) {\n        this.setState({showGalleryFullscreenButton: false});\n      }\n    }\n  }\n\n  _renderVideo(item) {\n    return (\n      <div>\n        {\n          this.state.showVideo[item.embedUrl] ?\n            <div className='video-wrapper'>\n                <a\n                  className='close-video'\n                  onClick={this._toggleShowVideo.bind(this, item.embedUrl)}\n                >\n                </a>\n                <iframe\n                  width='560'\n                  height='315'\n                  src={item.embedUrl}\n                  frameBorder='0'\n                  allowFullScreen\n                >\n                </iframe>\n            </div>\n          :\n            <a onClick={this._toggleShowVideo.bind(this, item.embedUrl)}>\n              <div className='play-button'></div>\n              <img className='image-gallery-image' src={item.original} />\n              {\n                item.description &&\n                  <span\n                    className='image-gallery-description'\n                    style={{right: '0', left: 'initial'}}\n                  >\n                    {item.description}\n                  </span>\n              }\n            </a>\n        }\n      </div>\n    );\n  }\n\n  render() {\n    return (\n\n      <section className='app'>\n        <ImageGallery\n          ref={i => this._imageGallery = i}\n          items={this.images}\n          lazyLoad={false}\n          onClick={this._onImageClick.bind(this)}\n          onImageLoad={this._onImageLoad}\n          onSlide={this._onSlide.bind(this)}\n          onPause={this._onPause.bind(this)}\n          onScreenChange={this._onScreenChange.bind(this)}\n          onPlay={this._onPlay.bind(this)}\n          infinite={this.state.infinite}\n          showBullets={this.state.showBullets}\n          showFullscreenButton={this.state.showFullscreenButton && this.state.showGalleryFullscreenButton}\n          showPlayButton={this.state.showPlayButton && this.state.showGalleryPlayButton}\n          showThumbnails={this.state.showThumbnails}\n          showIndex={this.state.showIndex}\n          showNav={this.state.showNav}\n          isRTL={this.state.isRTL}\n          thumbnailPosition={this.state.thumbnailPosition}\n          slideDuration={parseInt(this.state.slideDuration)}\n          slideInterval={parseInt(this.state.slideInterval)}\n          slideOnThumbnailOver={this.state.slideOnThumbnailOver}\n          additionalClass=\"app-image-gallery\"\n        />\n\n        <div className='app-sandbox'>\n\n          <div className='app-sandbox-content'>\n            <h2 className='app-header'>Settings</h2>\n\n            <ul className='app-buttons'>\n              <li>\n                <div className='app-interval-input-group'>\n                  <span className='app-interval-label'>Play Interval</span>\n                  <input\n                    className='app-interval-input'\n                    type='text'\n                    onChange={this._handleInputChange.bind(this, 'slideInterval')}\n                    value={this.state.slideInterval}/>\n                </div>\n              </li>\n\n              <li>\n                <div className='app-interval-input-group'>\n                  <span className='app-interval-label'>Slide Duration</span>\n                  <input\n                    className='app-interval-input'\n                    type='text'\n                    onChange={this._handleInputChange.bind(this, 'slideDuration')}\n                    value={this.state.slideDuration}/>\n                </div>\n              </li>\n\n              <li>\n                <div className='app-interval-input-group'>\n                  <span className='app-interval-label'>Thumbnail Bar Position</span>\n                  <select\n                    className='app-interval-input'\n                    value={this.state.thumbnailPosition}\n                    onChange={this._handleThumbnailPositionChange.bind(this)}\n                  >\n                    <option value='bottom'>Bottom</option>\n                    <option value='top'>Top</option>\n                    <option value='left'>Left</option>\n                    <option value='right'>Right</option>\n                  </select>\n                </div>\n              </li>\n            </ul>\n\n            <ul className='app-checkboxes'>\n              <li>\n                <input\n                  id='infinite'\n                  type='checkbox'\n                  onChange={this._handleCheckboxChange.bind(this, 'infinite')}\n                  checked={this.state.infinite}/>\n                  <label htmlFor='infinite'>allow infinite sliding</label>\n              </li>\n              <li>\n                <input\n                  id='show_fullscreen'\n                  type='checkbox'\n                  onChange={this._handleCheckboxChange.bind(this, 'showFullscreenButton')}\n                  checked={this.state.showFullscreenButton}/>\n                  <label htmlFor='show_fullscreen'>show fullscreen button</label>\n              </li>\n              <li>\n                <input\n                  id='show_playbutton'\n                  type='checkbox'\n                  onChange={this._handleCheckboxChange.bind(this, 'showPlayButton')}\n                  checked={this.state.showPlayButton}/>\n                  <label htmlFor='show_playbutton'>show play button</label>\n              </li>\n              <li>\n                <input\n                  id='show_bullets'\n                  type='checkbox'\n                  onChange={this._handleCheckboxChange.bind(this, 'showBullets')}\n                  checked={this.state.showBullets}/>\n                  <label htmlFor='show_bullets'>show bullets</label>\n              </li>\n              <li>\n                <input\n                  id='show_thumbnails'\n                  type='checkbox'\n                  onChange={this._handleCheckboxChange.bind(this, 'showThumbnails')}\n                  checked={this.state.showThumbnails}/>\n                  <label htmlFor='show_thumbnails'>show thumbnails</label>\n              </li>\n              <li>\n                <input\n                  id='show_navigation'\n                  type='checkbox'\n                  onChange={this._handleCheckboxChange.bind(this, 'showNav')}\n                  checked={this.state.showNav}/>\n                  <label htmlFor='show_navigation'>show navigation</label>\n              </li>\n              <li>\n                <input\n                  id='show_index'\n                  type='checkbox'\n                  onChange={this._handleCheckboxChange.bind(this, 'showIndex')}\n                  checked={this.state.showIndex}/>\n                  <label htmlFor='show_index'>show index</label>\n              </li>\n              <li>\n                <input\n                  id='is_rtl'\n                  type='checkbox'\n                  onChange={this._handleCheckboxChange.bind(this, 'isRTL')}\n                  checked={this.state.isRTL}/>\n                  <label htmlFor='is_rtl'>is right to left</label>\n              </li>\n              <li>\n                <input\n                  id='slide_on_thumbnail_hover'\n                  type='checkbox'\n                  onChange={this._handleCheckboxChange.bind(this, 'slideOnThumbnailOver')}\n                  checked={this.state.slideOnThumbnailOver}/>\n                  <label htmlFor='slide_on_thumbnail_hover'>slide on mouse over thumbnails</label>\n              </li>\n            </ul>\n          </div>\n\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './image-gallery.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}